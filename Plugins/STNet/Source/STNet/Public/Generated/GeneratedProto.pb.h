// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: GeneratedProto.proto
// Protobuf C++ Version: 5.29.3

#ifndef GeneratedProto_2eproto_2epb_2eh
#define GeneratedProto_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_GeneratedProto_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_GeneratedProto_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_GeneratedProto_2eproto;
class CS_Packet_Login;
struct CS_Packet_LoginDefaultTypeInternal;
extern CS_Packet_LoginDefaultTypeInternal _CS_Packet_Login_default_instance_;
class CS_Packet_Match;
struct CS_Packet_MatchDefaultTypeInternal;
extern CS_Packet_MatchDefaultTypeInternal _CS_Packet_Match_default_instance_;
class SC_Packet_Login;
struct SC_Packet_LoginDefaultTypeInternal;
extern SC_Packet_LoginDefaultTypeInternal _SC_Packet_Login_default_instance_;
class SC_Packet_Match;
struct SC_Packet_MatchDefaultTypeInternal;
extern SC_Packet_MatchDefaultTypeInternal _SC_Packet_Match_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum PacketType : int {
  PT_NONE = 0,
  PT_CS_LOGIN = 1,
  PT_SC_LOGIN = 2,
  PT_CS_MATCH = 3,
  PT_SC_MATCH = 4,
  PacketType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PacketType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PacketType_IsValid(int value);
extern const uint32_t PacketType_internal_data_[];
constexpr PacketType PacketType_MIN = static_cast<PacketType>(0);
constexpr PacketType PacketType_MAX = static_cast<PacketType>(4);
constexpr int PacketType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
PacketType_descriptor();
template <typename T>
const std::string& PacketType_Name(T value) {
  static_assert(std::is_same<T, PacketType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PacketType_Name().");
  return PacketType_Name(static_cast<PacketType>(value));
}
template <>
inline const std::string& PacketType_Name(PacketType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PacketType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool PacketType_Parse(absl::string_view name, PacketType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PacketType>(
      PacketType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SC_Packet_Match final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SC_Packet_Match) */ {
 public:
  inline SC_Packet_Match() : SC_Packet_Match(nullptr) {}
  ~SC_Packet_Match() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SC_Packet_Match* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SC_Packet_Match));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SC_Packet_Match(
      ::google::protobuf::internal::ConstantInitialized);

  inline SC_Packet_Match(const SC_Packet_Match& from) : SC_Packet_Match(nullptr, from) {}
  inline SC_Packet_Match(SC_Packet_Match&& from) noexcept
      : SC_Packet_Match(nullptr, std::move(from)) {}
  inline SC_Packet_Match& operator=(const SC_Packet_Match& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Packet_Match& operator=(SC_Packet_Match&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Packet_Match& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Packet_Match* internal_default_instance() {
    return reinterpret_cast<const SC_Packet_Match*>(
        &_SC_Packet_Match_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SC_Packet_Match& a, SC_Packet_Match& b) { a.Swap(&b); }
  inline void Swap(SC_Packet_Match* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Packet_Match* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Packet_Match* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SC_Packet_Match>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_Packet_Match& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SC_Packet_Match& from) { SC_Packet_Match::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SC_Packet_Match* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "SC_Packet_Match"; }

 protected:
  explicit SC_Packet_Match(::google::protobuf::Arena* arena);
  SC_Packet_Match(::google::protobuf::Arena* arena, const SC_Packet_Match& from);
  SC_Packet_Match(::google::protobuf::Arena* arena, SC_Packet_Match&& from) noexcept
      : SC_Packet_Match(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDedicateServerIPFieldNumber = 1,
  };
  // string DedicateServerIP = 1;
  void clear_dedicateserverip() ;
  const std::string& dedicateserverip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dedicateserverip(Arg_&& arg, Args_... args);
  std::string* mutable_dedicateserverip();
  PROTOBUF_NODISCARD std::string* release_dedicateserverip();
  void set_allocated_dedicateserverip(std::string* value);

  private:
  const std::string& _internal_dedicateserverip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dedicateserverip(
      const std::string& value);
  std::string* _internal_mutable_dedicateserverip();

  public:
  // @@protoc_insertion_point(class_scope:SC_Packet_Match)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SC_Packet_Match& from_msg);
    ::google::protobuf::internal::ArenaStringPtr dedicateserverip_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GeneratedProto_2eproto;
};
// -------------------------------------------------------------------

class SC_Packet_Login final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SC_Packet_Login) */ {
 public:
  inline SC_Packet_Login() : SC_Packet_Login(nullptr) {}
  ~SC_Packet_Login() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SC_Packet_Login* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SC_Packet_Login));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SC_Packet_Login(
      ::google::protobuf::internal::ConstantInitialized);

  inline SC_Packet_Login(const SC_Packet_Login& from) : SC_Packet_Login(nullptr, from) {}
  inline SC_Packet_Login(SC_Packet_Login&& from) noexcept
      : SC_Packet_Login(nullptr, std::move(from)) {}
  inline SC_Packet_Login& operator=(const SC_Packet_Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_Packet_Login& operator=(SC_Packet_Login&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_Packet_Login& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_Packet_Login* internal_default_instance() {
    return reinterpret_cast<const SC_Packet_Login*>(
        &_SC_Packet_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SC_Packet_Login& a, SC_Packet_Login& b) { a.Swap(&b); }
  inline void Swap(SC_Packet_Login* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_Packet_Login* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_Packet_Login* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SC_Packet_Login>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_Packet_Login& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SC_Packet_Login& from) { SC_Packet_Login::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SC_Packet_Login* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "SC_Packet_Login"; }

 protected:
  explicit SC_Packet_Login(::google::protobuf::Arena* arena);
  SC_Packet_Login(::google::protobuf::Arena* arena, const SC_Packet_Login& from);
  SC_Packet_Login(::google::protobuf::Arena* arena, SC_Packet_Login&& from) noexcept
      : SC_Packet_Login(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string UserId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // @@protoc_insertion_point(class_scope:SC_Packet_Login)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      30, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SC_Packet_Login& from_msg);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GeneratedProto_2eproto;
};
// -------------------------------------------------------------------

class CS_Packet_Match final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CS_Packet_Match) */ {
 public:
  inline CS_Packet_Match() : CS_Packet_Match(nullptr) {}
  ~CS_Packet_Match() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CS_Packet_Match* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CS_Packet_Match));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CS_Packet_Match(
      ::google::protobuf::internal::ConstantInitialized);

  inline CS_Packet_Match(const CS_Packet_Match& from) : CS_Packet_Match(nullptr, from) {}
  inline CS_Packet_Match(CS_Packet_Match&& from) noexcept
      : CS_Packet_Match(nullptr, std::move(from)) {}
  inline CS_Packet_Match& operator=(const CS_Packet_Match& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_Packet_Match& operator=(CS_Packet_Match&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_Packet_Match& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_Packet_Match* internal_default_instance() {
    return reinterpret_cast<const CS_Packet_Match*>(
        &_CS_Packet_Match_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CS_Packet_Match& a, CS_Packet_Match& b) { a.Swap(&b); }
  inline void Swap(CS_Packet_Match* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_Packet_Match* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_Packet_Match* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CS_Packet_Match>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CS_Packet_Match& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CS_Packet_Match& from) { CS_Packet_Match::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CS_Packet_Match* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CS_Packet_Match"; }

 protected:
  explicit CS_Packet_Match(::google::protobuf::Arena* arena);
  CS_Packet_Match(::google::protobuf::Arena* arena, const CS_Packet_Match& from);
  CS_Packet_Match(::google::protobuf::Arena* arena, CS_Packet_Match&& from) noexcept
      : CS_Packet_Match(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string UserId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // @@protoc_insertion_point(class_scope:CS_Packet_Match)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      30, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CS_Packet_Match& from_msg);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GeneratedProto_2eproto;
};
// -------------------------------------------------------------------

class CS_Packet_Login final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CS_Packet_Login) */ {
 public:
  inline CS_Packet_Login() : CS_Packet_Login(nullptr) {}
  ~CS_Packet_Login() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CS_Packet_Login* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CS_Packet_Login));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CS_Packet_Login(
      ::google::protobuf::internal::ConstantInitialized);

  inline CS_Packet_Login(const CS_Packet_Login& from) : CS_Packet_Login(nullptr, from) {}
  inline CS_Packet_Login(CS_Packet_Login&& from) noexcept
      : CS_Packet_Login(nullptr, std::move(from)) {}
  inline CS_Packet_Login& operator=(const CS_Packet_Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_Packet_Login& operator=(CS_Packet_Login&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_Packet_Login& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_Packet_Login* internal_default_instance() {
    return reinterpret_cast<const CS_Packet_Login*>(
        &_CS_Packet_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CS_Packet_Login& a, CS_Packet_Login& b) { a.Swap(&b); }
  inline void Swap(CS_Packet_Login* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_Packet_Login* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_Packet_Login* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CS_Packet_Login>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CS_Packet_Login& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CS_Packet_Login& from) { CS_Packet_Login::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CS_Packet_Login* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CS_Packet_Login"; }

 protected:
  explicit CS_Packet_Login(::google::protobuf::Arena* arena);
  CS_Packet_Login(::google::protobuf::Arena* arena, const CS_Packet_Login& from);
  CS_Packet_Login(::google::protobuf::Arena* arena, CS_Packet_Login&& from) noexcept
      : CS_Packet_Login(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string UserId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string Password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:CS_Packet_Login)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      38, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CS_Packet_Login& from_msg);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GeneratedProto_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CS_Packet_Login

// string UserId = 1;
inline void CS_Packet_Login::clear_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& CS_Packet_Login::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CS_Packet_Login.UserId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CS_Packet_Login::set_userid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CS_Packet_Login.UserId)
}
inline std::string* CS_Packet_Login::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:CS_Packet_Login.UserId)
  return _s;
}
inline const std::string& CS_Packet_Login::_internal_userid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userid_.Get();
}
inline void CS_Packet_Login::_internal_set_userid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* CS_Packet_Login::_internal_mutable_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* CS_Packet_Login::release_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CS_Packet_Login.UserId)
  return _impl_.userid_.Release();
}
inline void CS_Packet_Login::set_allocated_userid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CS_Packet_Login.UserId)
}

// string Password = 2;
inline void CS_Packet_Login::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& CS_Packet_Login::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CS_Packet_Login.Password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CS_Packet_Login::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CS_Packet_Login.Password)
}
inline std::string* CS_Packet_Login::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:CS_Packet_Login.Password)
  return _s;
}
inline const std::string& CS_Packet_Login::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void CS_Packet_Login::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* CS_Packet_Login::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* CS_Packet_Login::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CS_Packet_Login.Password)
  return _impl_.password_.Release();
}
inline void CS_Packet_Login::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CS_Packet_Login.Password)
}

// -------------------------------------------------------------------

// SC_Packet_Login

// string UserId = 1;
inline void SC_Packet_Login::clear_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& SC_Packet_Login::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SC_Packet_Login.UserId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SC_Packet_Login::set_userid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SC_Packet_Login.UserId)
}
inline std::string* SC_Packet_Login::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:SC_Packet_Login.UserId)
  return _s;
}
inline const std::string& SC_Packet_Login::_internal_userid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userid_.Get();
}
inline void SC_Packet_Login::_internal_set_userid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* SC_Packet_Login::_internal_mutable_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* SC_Packet_Login::release_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SC_Packet_Login.UserId)
  return _impl_.userid_.Release();
}
inline void SC_Packet_Login::set_allocated_userid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:SC_Packet_Login.UserId)
}

// -------------------------------------------------------------------

// CS_Packet_Match

// string UserId = 1;
inline void CS_Packet_Match::clear_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& CS_Packet_Match::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CS_Packet_Match.UserId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CS_Packet_Match::set_userid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CS_Packet_Match.UserId)
}
inline std::string* CS_Packet_Match::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:CS_Packet_Match.UserId)
  return _s;
}
inline const std::string& CS_Packet_Match::_internal_userid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userid_.Get();
}
inline void CS_Packet_Match::_internal_set_userid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* CS_Packet_Match::_internal_mutable_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* CS_Packet_Match::release_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CS_Packet_Match.UserId)
  return _impl_.userid_.Release();
}
inline void CS_Packet_Match::set_allocated_userid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CS_Packet_Match.UserId)
}

// -------------------------------------------------------------------

// SC_Packet_Match

// string DedicateServerIP = 1;
inline void SC_Packet_Match::clear_dedicateserverip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dedicateserverip_.ClearToEmpty();
}
inline const std::string& SC_Packet_Match::dedicateserverip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SC_Packet_Match.DedicateServerIP)
  return _internal_dedicateserverip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SC_Packet_Match::set_dedicateserverip(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dedicateserverip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SC_Packet_Match.DedicateServerIP)
}
inline std::string* SC_Packet_Match::mutable_dedicateserverip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dedicateserverip();
  // @@protoc_insertion_point(field_mutable:SC_Packet_Match.DedicateServerIP)
  return _s;
}
inline const std::string& SC_Packet_Match::_internal_dedicateserverip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dedicateserverip_.Get();
}
inline void SC_Packet_Match::_internal_set_dedicateserverip(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dedicateserverip_.Set(value, GetArena());
}
inline std::string* SC_Packet_Match::_internal_mutable_dedicateserverip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dedicateserverip_.Mutable( GetArena());
}
inline std::string* SC_Packet_Match::release_dedicateserverip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SC_Packet_Match.DedicateServerIP)
  return _impl_.dedicateserverip_.Release();
}
inline void SC_Packet_Match::set_allocated_dedicateserverip(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dedicateserverip_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.dedicateserverip_.IsDefault()) {
    _impl_.dedicateserverip_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:SC_Packet_Match.DedicateServerIP)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::PacketType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::PacketType>() {
  return ::PacketType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GeneratedProto_2eproto_2epb_2eh
